using System;
using System.Drawing;
using System.IO;
using System.Runtime.InteropServices;
using System.Windows.Forms;

namespace AxonSimpleUI
{
    public partial class AxonSimpleUIForm : Form
    {
        private bool dragging = false;
        private Point dragCursorPoint;
        private Point dragFormPoint;

        public AxonSimpleUIForm()
        {
            InitializeComponent();
            richTextBox1.Text = "I hope your pillows are warm on both sides. I hope you wash your hands with long sleeves down. I hope you stub your toe when you turn every corner. I hope the shower isn't the right temperature when you walk into it. I hope you clip your nails irregularly. I hope you inhale spit and choke. I hope your car stalls every time you start it. I hope you wake up with your eyes feeling dry. I hope bubble wrap doesn't make a popping sound when you hit it. I hope boxes rip when you try to close them. I hope your phone dies midway through a school day. I hope you exit the shower with traces of shampoo still in your hair. I hope you drop the fork whenever you eat. I hope your earbuds die in the right ear. I hope you live off of canned beans for the rest of your life. I hope you trip on a rock. I hope you drop the soap. I hope you think of your personality when you look at wallpaper. I hope you like the taste of shit.";
        }

        public const int WM_NCLBUTTONDOWN = 0xA1;
        public const int HT_CAPTION = 0x2;

        [DllImportAttribute("user32.dll")]
        public static extern int SendMessage(IntPtr hWnd,
                         int Msg, int wParam, int lParam);
        [DllImportAttribute("user32.dll")]
        public static extern bool ReleaseCapture();


        private void CloseButton_Click(object sender, EventArgs e) => Environment.Exit(0);

        private void MinimizeButton_Click(object sender, EventArgs e) => WindowState = FormWindowState.Minimized;

        private void Inject_Click(object sender, EventArgs e) => Functions.Inject();

        private void ExecuteButton_Click(object sender, EventArgs e)
        {
            if (NamedPipes.NamedPipeExist(NamedPipes.luapipename))//check if the pipe exist
            {
                NamedPipes.LuaPipe(richTextBox1.Text);//lua pipe function to send the script
            }
            else
            {
                MessageBox.Show($"Inject {Functions.exploitdllname} before Using this!", "Error", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);//if the pipe can't be found a messagebox will appear
                return;
            }
        }

        private void ClearButton_Click(object sender, EventArgs e) => richTextBox1.Text = ""; //Clear the MonacoEditor

        private void OpenButton_Click(object sender, EventArgs e)
        {
            if (Functions.openfiledialog.ShowDialog() == DialogResult.OK)//check if the user clicked Ok/open
            {
                try
                {
                    richTextBox1.Text = File.ReadAllText(Functions.openfiledialog.FileName);
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"Error: Could not read file from disk. Original error: {ex.Message}");//display if got error
                }
            }
        }

        private void StatusTimer_Tick(object sender, EventArgs e)
        {
            if (NamedPipes.NamedPipeExist(NamedPipes.luapipename))
            {
                StatusLabel.Text = "Injotreed";
                StatusLabel.ForeColor = System.Drawing.Color.Green;
            }
            else
            {
                StatusLabel.Text = "Not\nnjected";
                StatusLabel.ForeColor = System.Drawing.Color.Red;
            }
        }

        private void AxonSimpleUIForm_Load(object sender, EventArgs e)
        {

        }

        private void panel1_MouseMove(object sender, MouseEventArgs e)
        {
            if (dragging)
            {
                Point dif = Point.Subtract(Cursor.Position, new Size(dragCursorPoint));
                this.Location = Point.Add(dragFormPoint, new Size(dif));
            }
        }

        private void panel1_MouseDOWn(object sender, MouseEventArgs e)
        {
            dragging = true;
            dragCursorPoint = Cursor.Position;
            dragFormPoint = this.Location;
        }

        private void panel1_MouseNDOWN(object sender, MouseEventArgs e)
        {
            dragging = false;
        }
    }
}
